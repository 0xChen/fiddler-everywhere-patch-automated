name: Continuous Patch

env:
  CURRENT_VERSION: ${{ vars.LATEST_PATCHED_VERSION }}

on:
  push:
    branches:
      - main  
  workflow_dispatch:

jobs:
  scrape_fe_version:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [22.9.0]

    outputs:
      scraped_version: ${{ steps.set_scraped_version.outputs.scraped_version }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: utils/fe-version-scraper/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('utils/fe-version-scraper/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install Node.js dependencies
        run: npm ci
        working-directory: utils/fe-version-scraper

      - name: Run the Node.js script
        run: node .
        working-directory: utils/fe-version-scraper

      - name: Read & Set Env
        id: set_scraped_version
        run: |
          $fileContent = Get-Content -Path "utils/fe-version-scraper/latest_version.txt" -Raw
          echo "scraped_version=$fileContent" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

  compare-versions:
    runs-on: windows-latest
    needs: scrape_fe_version

    env:
      SCRAPED_VERSION: ${{ needs.scrape_fe_version.outputs.scraped_version }}

    steps:
      - name: Check Should Continue
        id: should_continue
        run: |
          $scrapedVersion = $env:SCRAPED_VERSION
          $currentVersion = $env:CURRENT_VERSION

          if (-not [string]::IsNullOrEmpty($scrapedVersion)) {
              if ([version]$scrapedVersion -ge [version]$currentVersion) {
                  echo "should_continue=true" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
              } else {
                  echo "should_continue=false" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
              }
          } else {
              echo "should_continue=false" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          }
        shell: pwsh
   
  download-yukihana-patch:
    runs-on: windows-latest
    needs: 
      - compare-versions
      - scrape_fe_version

    env: 
      SCRAPED_VERSION: ${{ needs.scrape_fe_version.outputs.scraped_version }}
      
    if: ${{ needs.compare-versions.outputs.should_continue }} == 'true'

    outputs:
      is-compatible-cont: ${{ steps.is-compatible-cont.outputs.is-compatible-cont }}
      yukihana-fiddler-name: ${{ steps.yukihana-fiddler-name.outputs.yukihana-fiddler-name }}

    steps:
      - name: Compare SCRAPED_VERSION with 5.17.0
        id: scraped_version_check
        run: |
          $scrapedVersion = $env:SCRAPED_VERSION
          $compareVersion = "5.16.0"
   
          if (-not [string]::IsNullOrEmpty($scrapedVersion)) {
              if ([version]$scrapedVersion -ge [version]$compareVersion) {
                  echo "IS_COMPATIBLE_CONT=true" | Out-File -Append -FilePath $env:GITHUB_ENV
              } else {
                  echo "IS_COMPATIBLE_CONT=false" | Out-File -Append -FilePath $env:GITHUB_ENV
              }
          } else {
              echo "IS_COMPATIBLE_CONT=false" | Out-File -Append -FilePath $env:GITHUB_ENV
          }
        
        shell: pwsh

      - name: Set IS_COMPATIBLE_CONT as Output
        id: is-compatible-cont
        run: echo "is-compatible-cont=${{ env.IS_COMPATIBLE_CONT }}" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
        
      - name: Set Yukihana fiddler name (>= 5.17.0)
        if: env.IS_COMPATIBLE_CONT == 'true'
        run: echo "YUKIHANA_FIDDLER_NAME=fiddler" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Set Yukihana fiddler name (< 5.17.0)
        if: env.IS_COMPATIBLE_CONT == 'false'
        run: echo "YUKIHANA_FIDDLER_NAME=libfiddler" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Set YUKIHANA_FIDDLER_NAME as Output
        id: yukihana-fiddler-name
        run: echo "yukihana-fiddler-name=${{ env.YUKIHANA_FIDDLER_NAME }}" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Create yukihana directory
        run: |
          if (-Not (Test-Path "yukihana")) {
            New-Item -ItemType Directory -Path "yukihana"
          }
        shell: pwsh

      - name: Set Yukihana Release (>= 5.17.0)
        if: env.IS_COMPATIBLE_CONT == 'true'
        run: echo "YUKIHANA_RELEASE=continuous" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Set Yukihana Release (< 5.17.0) 
        if: env.IS_COMPATIBLE_CONT == 'false'
        run: echo "YUKIHANA_RELEASE=v1.0.9" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Print Environment Variables
        run: |
          Write-Host "YUKIHANA_FIDDLER_NAME: $env:YUKIHANA_FIDDLER_NAME"
          Write-Host "IS_COMPATIBLE_CONT: $env:IS_COMPATIBLE_CONT"
          Write-Host "CURRENT_VERSION: $env:CURRENT_VERSION"
          Write-Host "SCRAPED_VERSION: $env:SCRAPED_VERSION"
          Write-Host "YUKIHANA_RELEASE: $env:YUKIHANA_RELEASE"
        shell: pwsh
        
      - name: Download Yukihana Patch
        run: |
          try {
            # Build the download URLs
            $yukihanaFiddlerUrl = "https://github.com/project-yukihana/Yukihana-patch/releases/download/$env:YUKIHANA_RELEASE/yukihana-$env:YUKIHANA_FIDDLER_NAME-win32-x86_64-$env:YUKIHANA_RELEASE.dll"
            $yukihanaHostPolicyUrl = "https://github.com/project-yukihana/Yukihana-patch/releases/download/$env:YUKIHANA_RELEASE/yukihana-hostpolicy-win32-x86_64-$env:YUKIHANA_RELEASE.dll"
            
            # Print the URLs to ensure they're correct
            Write-Host "Downloading files from $env:YUKIHANA_RELEASE"
            Write-Host "Yukihana Fiddler URL: $yukihanaFiddlerUrl"
            Write-Host "Yukihana HostPolicy URL: $yukihanaHostPolicyUrl"

            # Download the files
            Invoke-WebRequest -Uri $yukihanaFiddlerUrl -OutFile "yukihana\$env:YUKIHANA_FIDDLER_NAME.dll"
            Invoke-WebRequest -Uri $yukihanaHostPolicyUrl -OutFile "yukihana\hostpolicy.dll"
          }
          catch {
            Write-Error "Failed to download the patch files. Error details: $_"
            exit 1
          }
        shell: pwsh
      
      - name: Upload yukihana folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: yukihana-patch
          path: yukihana/

  download-madjos-server:
    runs-on: windows-latest
    needs: 
      - compare-versions
      - download-yukihana-patch

    steps:
      - name: Set up Git
        run: |
          git init
          git remote add origin https://github.com/msojocs/fiddler-everywhere-enhance.git
          git config core.sparseCheckout true

      - name: Configure sparse-checkout to download the server directory
        run: |
          echo "server" | Out-File -Append -FilePath .git\info\sparse-checkout
          git pull origin master

      - name: Move the downloaded directory to the target folder
        run: |
          mkdir -p madjos
          Move-Item -Path server -Destination madjos/

      - name: List files in the madjos/server directory
        run: Get-ChildItem -Path madjos\server

      - name: Upload madjos folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: madjos-patch
          path: madjos/

  download-fiddler-everywhere:
    runs-on: windows-latest

    needs:
      - compare-versions
      - download-yukihana-patch
      - download-madjos-server
      - scrape_fe_version

    steps:
      - name: Build URL & Download
        run: |
          # Retrieve the scraped version from the previous step
          $scrapedVersion = "${{ needs.scrape_fe_version.outputs.scraped_version }}"
          
          # Check if the scraped version is available
          if (-not [string]::IsNullOrEmpty($scrapedVersion)) {
            $downloadUrl = "https://downloads.getfiddler.com/win/Fiddler%20Everywhere%20$scrapedVersion.exe"
          
            Write-Host "Download URL: $downloadUrl"

            Invoke-WebRequest -Uri $downloadUrl -OutFile "FiddlerEverywhereSetup.exe"
            
          } else {
            Write-Host "SCRAPED_VERSION is empty or not set"
            exit 1
          }
        shell: pwsh

      - name: Extract exe 
        run: 7z x FiddlerEverywhereSetup.exe -ofe_extracted

      - name: Upload Fiddler Everywhere Extracted folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-artifact
          path: fe_extracted/

  patch_fe:
    runs-on: windows-latest

    needs:
      - compare-versions
      - download-yukihana-patch
      - download-madjos-server
      - download-fiddler-everywhere
      - scrape_fe_version

    steps:
      - name: Download Yukuhana-Patch
        uses: actions/download-artifact@v4
        with:
          name: yukihana-patch

      - name: Download MadJos-Server
        uses: actions/download-artifact@v4
        with:
          name: madjos-patch

      - name: Download FE
        uses: actions/download-artifact@v4
        with:
          name: fe-artifact

      - name: Extract all artifacts into patches folder
        run: |
          mkdir patches
          Expand-Archive -Path "yukihana-patch.zip" -DestinationPath "patches/yukihana"
          Expand-Archive -Path "madjos-patch.zip" -DestinationPath "patches/madjos"
          Expand-Archive -Path "fe_artifact.zip" -DestinationPath "patches/fe_extracted"
        shell: pwsh

      - name: Clean (Zip artifacts)
        run: |
          Remove-Item "yukihana-patch.zip"
          Remove-Item "madjos-patch.zip"
          Remove-Item "fe_artifact.zip"

      - name: List Extracted Files
        run: Get-ChildItem -Path .\patches\ -Recurse

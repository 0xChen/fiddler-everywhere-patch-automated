name: Continuous Patch 

env:
  CURRENT_VERSION: ${{ vars.LATEST_PATCHED_VERSION }}

on:
  push:
    branches:
      - main  
  workflow_dispatch:

jobs:
  scrape-fe-version-and-set-env:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.9.0'

    - name: Install Node.js dependencies
      run: npm ci
      working-directory: utils/fe-version-scraper

    - name: Run the Node.js script
      run: node .
      working-directory: utils/fe-version-scraper

    - name: Read & Set SCRAPED_VERSION
      run: |
        $fileContent = Get-Content -Path "utils/fe-version-scraper/latest_version.txt" -Raw
        echo "SCRAPED_VERSION=$fileContent" >> $GITHUB_ENV

  compare-versions:
    runs-on: windows-latest
    needs: scrape-fe-version-and-set-env

    outputs:
      should_continue: ${{ steps.should_continue.outputs.should_continue }}

    steps:
    - name: Check Should Continue
      id: should_continue
      run: |
        $scrapedVersion = ${{ env.SCRAPED_VERSION }}
        $currentVersion = ${{ env.CURRENT_VERSION }}

        if (-not [string]::IsNullOrEmpty($scrapedVersion)) {
            if ([version]$scrapedVersion -ge [version]$currentVersion) {
                echo "should_continue=true" >> $GITHUB_OUTPUT
            } else {
                echo "should_continue=false" >> $GITHUB_OUTPUT
            }
        } else {
            echo "should_continue=false" >> $GITHUB_OUTPUT
        }
        
      shell: pwsh
   
  download-yukihana-patch:
    runs-on: windows-latest
    needs: compare-versions
    outputs:
      YUKIHANA_FIDDLER_NAME: ${{ steps.set_fiddler_name.outputs.fiddler_name }}
      IS_COMPATIBLE_CONT: ${{ steps.set_compatibility.outputs.is_compatible }}
      YUKIHANA_RELEASE: ${{ steps.set_release.outputs.release }}

    steps:
      - name: Compare SCRAPED_VERSION with 5.17.0
        id: scraped_version_check
        run: |
          $scrapedVersion = ${{ env.SCRAPED_VERSION }}
          $compareVersion = "5.17.0"

          if (-not [string]::IsNullOrEmpty($scrapedVersion)) {
              if ([version]$scrapedVersion -ge [version]$compareVersion) {
                  echo "IS_COMPATIBLE_CONT=true" >> $GITHUB_OUTPUT
              } else {
                  echo "IS_COMPATIBLE_CONT=false" >> $GITHUB_OUTPUT
              }
          } else {
              echo "IS_COMPATIBLE_CONT=false" >> $GITHUB_OUTPUT
          }
        
        shell: pwsh

      - name: Set Yukihana fiddler name
        id: set_fiddler_name
        run: |
          if (${{ steps.scraped_version_check.outputs.is_compatible }} -eq 'true') {
              echo "fiddler.dll" >> $GITHUB_OUTPUT
          } else {
              echo "libfiddler.dll" >> $GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Set Yukihana Release
        id: set_release
        run: |
          if (${{ steps.scraped_version_check.outputs.is_compatible }} -eq 'true') {
              echo "continuous" >> $GITHUB_OUTPUT
          } else {
              echo "v1.0.9" >> $GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Print Environment Variables
        run: |
          Write-Host "YUKIHANA_FIDDLER_NAME: ${{ steps.set_fiddler_name.outputs.fiddler_name }}"
          Write-Host "IS_COMPATIBLE_CONT: ${{ steps.scraped_version_check.outputs.is_compatible }}"
          Write-Host "YUKIHANA_RELEASE: ${{ steps.set_release.outputs.release }}"
        shell: pwsh

  download-madjos-server:
    runs-on: windows-latest
    needs: 
      - compare-versions
      - download-yukihana-patch

    steps:
      - name: Use Outputs
        run: |
          echo "YUKIHANA_FIDDLER_NAME: ${{ needs.download-yukihana-patch.outputs.YUKIHANA_FIDDLER_NAME }}"
          echo "IS_COMPATIBLE_CONT: ${{ needs.download-yukihana-patch.outputs.IS_COMPATIBLE_CONT }}"
          echo "YUKIHANA_RELEASE: ${{ needs.download-yukihana-patch.outputs.YUKIHANA_RELEASE }}"
        shell: pwsh

  download-fiddler-everywhere:
    runs-on: windows-latest
    needs:
      - compare-versions
      - download-yukihana-patch
      - download-madjos-server

    steps:
      - name: Download Fiddler Everywhere Using WinGet
        run: winget download --id=Telerik.Fiddler.Everywhere -d="${{ github.workspace }}"

      - name: Extract exe 
        run: 7z x *.exe -o fe_extracted

      - name: Upload Fiddler Everywhere Extracted folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-artifact
          path: fe_extracted/

  patch_fe:
    runs-on: windows-latest
    needs:
      - compare-versions
      - download-yukihana-patch
      - download-madjos-server
      - download-fiddler-everywhere

    steps:
      - name: Download All Artifacts (Patch Utils)
        uses: actions/download-artifact@v4
        with:
          name: '*'

      - name: Extract All Artifacts using 7-Zip
        run: |
          mkdir extracted
          for %%f in (*.zip) do (
            7z x "%%f" -o "extracted"
          )

      - name: List Extracted Files
        run: |
          Get-ChildItem -Path .\extracted\ -Recurse

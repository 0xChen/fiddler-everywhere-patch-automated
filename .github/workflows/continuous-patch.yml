name: Continuous Patch 

env:
  CURRENT_VERSION: ${{ vars.LATEST_PATCHED_VERSION }}
  SCRAPED_VERSION: ""
  YUKIHANA_FIDDLER_NAME: "fiddler.dll"

on:
  workflow_dispatch:

jobs:
  scrape-fe-version-and-set-env:
    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [22.9.0]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: utils/fe-version-scraper/node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('utils/fe-version-scraper/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install Node.js dependencies
      run: npm ci
      working-directory: utils/fe-version-scraper

    - name: Run the Node.js script
      run: node .
      working-directory: utils/fe-version-scraper


    - name: Read & Set Env
      run: |
        $fileContent = Get-Content -Path "utils/fe-version-scraper/latest_version.txt" -Raw
        echo "SCRAPED_VERSION=$fileContent" >> $GITHUB_ENV

  compare-versions:
    runs-on: windows-latest
    needs: scrape-fe-version-and-set-env

    steps:
      - name: Compare Versions
        id: version_compare
        uses: frankfarrell/semver-tool@v3.4.0
        with:
          version: ${{ env.CURRENT_VERSION }}
          operator: gt
          compare_with: ${{ env.SCRAPED_VERSION }}

      - name: Set if Continue?
        id: set_continue
        run: echo "should_continue=${{ steps.version_compare.outputs.result }}" >> $GITHUB_OUTPUT

  download-yukihana-patch:
    runs-on: windows-latest
    needs: compare-versions
    if: ${{ needs.compare-versions.outputs.should_continue == 'true' }}

    steps:
      - name: Compare SCRAPED_VERSION with 5.17.0
        id: scraped_version_check
        uses: frankfarrell/semver-tool@v3.4.0
        with:
          version: ${{ env.SCRAPED_VERSION }}
          operator: gte
          compare_with: '5.17.0'

      - name: Set Yukihana fiddler name (>= 5.17.0)
        if: steps.scraped_version_check.outputs.result == 'true'
        run: echo "YUKIHANA_FIDDLER_NAME=fiddler.dll" >> $GITHUB_ENV

      - name: Set Yukihana fiddler name (< 5.17.0)
        if: steps.scraped_version_check.outputs.result == 'false'
        run: echo "YUKIHANA_FIDDLER_NAME=libfiddler.dll" >> $GITHUB_ENV

      - name: Create yukihana directory
        run: |
          if (-Not (Test-Path "yukihana")) {
            New-Item -ItemType Directory -Path "yukihana"
          }
        shell: pwsh

      - name: Set Yukihana Release (if CURRENT_VERSION >= 5.17.0)
        if: steps.scraped_version_check.outputs.result == 'true'
        run: echo "YUKIHANA_RELEASE=continuous" >> $GITHUB_ENV

      - name: Set Yukihana Release (if CURRENT_VERSION < 5.17.0) 
        if: steps.scraped_version_check.outputs.result == 'false'
        run: echo "YUKIHANA_RELEASE=v1.0.9" >> $GITHUB_ENV
    
      - name: Download Yukihana Patch
        run: |
          echo "Downloading files from ${{ env.YUKIHANA_RELEASE }}"
          Invoke-WebRequest -Uri https://github.com/project-yukihana/Yukihana-patch/releases/download/${{ env.YUKIHANA_RELEASE }}/yukihana-${{ env.YUKIHANA_FIDDLER_NAME }}-win32-x86_64-${{ env.YUKIHANA_RELEASE }}.dll -OutFile yukihana/${{ env.YUKIHANA_FIDDLER_NAME }}.dll
          Invoke-WebRequest -Uri https://github.com/project-yukihana/Yukihana-patch/releases/download/${{ env.YUKIHANA_RELEASE }}/yukihana-hostpolicy-win32-x86_64-${{ env.YUKIHANA_RELEASE }}.dll -OutFile yukihana/hostpolicy.dll
        shell: pwsh
      
      - name: Upload yukihana folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: yukihana-patch
          path: yukihana/

  download-madjos-server:
    runs-on: windows-latest
    needs: 
      - compare-versions
      - download-yukihana-patch

    steps:
      - name: Set up Git
        run: |
          git init
          git remote add origin https://github.com/msojocs/fiddler-everywhere-enhance.git
          git config core.sparseCheckout true

      - name: Configure sparse-checkout to download the server directory
        run: |
          echo "server" >> .git/info/sparse-checkout
          git pull origin master

      - name: Move the downloaded directory to the target folder
        run: |
          mkdir -p madjos
          move server madjos/

      - name: List files in the madjos/server directory
        run: |
          dir madjos/server

      - name: Upload madjos folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: madjos-patch
          path: madjos/

  download-fiddler-everywhere:
    runs-on: windows-latest

    needs:
      - compare-versions
      - download-yukihana-patch
      - download-madjos-server

    steps:
      - name: Download Fiddler Everywhere Using WinGet
        run: winget download --id=Telerik.Fiddler.Everywhere -d="${{ github.workspace }}"

      - name: Extract exe 
        run: 7z x *.exe -o fe_extracted

      - name: Upload Fiddler Everywhere Extracted folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-artifact
          path: fe_extracted/

  patch_fe:
    runs-on: windows-latest

    needs:
      - compare-versions
      - download-yukihana-patch
      - download-madjos-server
      - download-fiddler-everywhere

    steps:
      - name: Download All Artifacts (Patch Utils)
        uses: actions/download-artifact@v4
        with:
          name: '*'

      - name: Extract All Artifacts using 7-Zip
        run: |
          mkdir extracted
          for %%f in (*.zip) do (
            7z x "%%f" -o "extracted"
          )

      - name: List Extracted Files
        run: |
          Get-ChildItem -Path .\extracted\ -Recurse
